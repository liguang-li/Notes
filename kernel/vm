Descibing physical memory

NUMA: non-uniform memory access

With large scale machines, memory may be arranged into banks
that incur a different cost to access depending on the “distance”
from the processor. For example, there might be a bank of memory
assigned to each CPU or a bank of memory very suitable for DMA
near device cards.

Each bank is called a node and the concept is represented under
Linux by a struct pglist_data even if the architecture is UMA.
This struct is always referenced to by it's typedef pg_data_t.

Every node in the system is kept on a NULL terminated list called
pgdat_list and each node is linked to the next with the field 
pg_data_t->node_next. For UMA architectures like PC desktops,
only one static pg_data_t structure called contig_page_data is used. 

Each node is divided up into a number of blocks called zones which
represent ranges within memory. 

Zones should not be confused with zone based allocators as they are
unrelated. 

A zone is described by a struct zone_struct, typedeffed to zone_t
and each one is of type ZONE_DMA, ZONE_NORMAL or ZONE_HIGHMEM.

Each zone type suitable a different type of usage. 
ZONE_DMA is memory in the lower physical memory ranges which certain 
ISA devices require.
Memory within ZONE_NORMAL is directly mapped by the kernel into the 
upper region of the linear address space.
ZONE_HIGHMEM is the remaining available memory in the system and is
not directly mapped by the kernel.

With the x86 the zones are:

ZONE_DMA	First 16MiB of memory
ZONE_NORMAL	16MiB - 896MiB
ZONE_HIGHMEM	896 MiB - End

Each physical page frame is represented by a struct page and all the
structs are kept in a global mem_map array which is usually stored at
the beginning of ZONE_NORMAL or just after the area reserved for the
loaded kernel image in low memory machines.

			pg_data_t
			    |
			node_zones
			    |
	ZONE_DMA	ZONE_NORMAL	ZONE_HIGHMEM
	    |		    |		     |
	mem_map		  mem_map	    mem_map
	    |		    |		     |
	   page		   page		    page
